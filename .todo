/**
 *TODO: DONE
 **GET     : /categories                  // Get all categories
 **GET     : /categories/{id}             // Get all products of that categories
 *@POST    : /categories        {admin}   // Create a new Categories
 *?UPDATE  : /categories/{id}   {admin}   // Update Categories with Id
 *!DELETE  : /categories/{id}   {admin}   // Delete Categories with Id
 *TODO: DONE
// **GET     : /products                    // Get all Products of Apps
 **GET     : /products/{id}               // Get the products with id & depend on categoryId
 *@POST    : /products          {admin}   // Create new Product & depend on categoryId      
 *?UPDATE  : /products/{}       {admin}   // Update product with id & depend on categoryId
 *!DELETE  : /products/{}       {admin}   // Delete product with id & depend on categoryId

 *TODO: DONE
 **GET     : /toppings                    // Getall Toppings
 *@POST    : /toppings            {admin} // Create Toppings
 *?UPDATE  : /toppings/{id}       {admin} // Update Topping with id
 *!DELETE  : /toppings/{id}       {admin} // Delete Topping with id
 *
 * TODO: DONE
 **GET     : /users             {admin}    
 **GET     : /users/info        {authen}   
 *@POST    : /users                        
 *@POST    :/login                         
 *?UPDATE  : /users/info        {authen}   
 *!DELETE  : /users{id}         {admin}    
 * 
 *  
 
 **GET     : /orders              {admin} // Get all Orders sort by OrderDate
 **GET     : /cart                {user}  // Get orderDetails 
 **GET     : /orders/{id}         {user}  //     
 **GET     : /orders/history      {user}
 *@POST    : /orders              {admin}       
 *!DELETE  : /orders/{id}    {admin|user}
 **GET
 * 
 * 
 **GET     : /productDetail
 * 
 **GET     : /bestsellers          
 *






 /**
  * database access
    lytaitruong 
    Anhboydeptrai5

MongoAtlas
    lytaitruong060197@gmail.com
    Anhboydeptraivip5!

Network Whitelist
    IP Address: 0.0.0.0

mongodb+srv://lytaitruong:<Anhboydeptrai5>@leeatschool-qo1pj.mongodb.net/test?retryWrites=true&w=majority


heroku account
    lytaitruong060197@gmail.com
    Anhboydeptraithe5
  */


getAllProducts: async () => {
        const listProduct = await CategoriesModel.aggregate([
            {$group: {_id: "AllProducts", listProduct: {$push: "$listProduct"}}},
            {"$project": {
                "listProduct": {
                    "$reduce": {
                        "input": "$listProduct",
                        "initialValue": [],
                        "in": { "$setUnion": ["$$value", "$$this"] }
                    }
                }
            }}
        ])
        return listProduct;
    },
    getProduct: async (productId) => {
        const product = await CategoriesModel.findOne({"listProduct._id": productId},
        {"listProduct": {$elemMatch: {'_id': productId}}})
        return (product) 
            ? product
            : Boom.notFound("Product")
    },
    createProduct: async (categoryId, data) =>{
        const product = await CategoriesModel.update(
            {_id: categoryId},
            {$push: {listProduct: data}}
        )
        return (product.n && product.nModified) 
            ? "CREATE SUCCESS"
            : Boom.notFound(`Category`)
    },
    updateProduct: async ({categoryId, productId}, 
                          {productName, imageUri, type, description, 
                           size, crust, sale, price, topping, rating}) =>{
        const data = (type === 'PIZZA')
            ? {productName, imageUri, description, type, size, crust, sale, rating, topping}
            : {productName, imageUri, description, type, price,       sale, rating, topping}
        const product = await CategoriesModel.updateOne(
            { _id : categoryId, "listProduct._id": productId},
            {$set:  {"listProduct.$": data}}
        )
        console.log(product);
        return (product.n && product.nModified)
            ? `UPDATE SUCCESS`
            : Boom.notFound(`Product`)
    },
    deleteProduct: async ({categoryId, productId}) =>{
        const product = await CategoriesModel.update(
            {_id: categoryId},
            {$pull: {'listProduct': {_id : productId}}},
        )
        return (product.n && product.nModified)
            ? `DELETE SUCCESS`
            : Boom.notFound(`Product`)
    }